--- 
wordpress_id: 513
layout: post
title: !binary |
  54K65L2V5oiR5o6h55SoIFJPUiDmkK3lu7rntrLnq5k/LSDku6Ugb3BtcjYg
  54K65L6L

date: 2007-12-16 00:16:51 +08:00
wordpress_url: http://blog.xdite.net/?p=513
---
自從中肯鑽石網火速上線以後，我幾個網路上的朋友都對於使用 ROR 製作網站速度之快，感到十分驚奇與震撼。紛紛丟 MSN 向我請教快速的製作一個網站需要學習哪些技術？是否一開始就學習 ROR？或者是使用 ROR 開發他心目中所需要的網站需要多少時間？

其實這些主題都很大，我很難一一完整回答，只能簡單回覆。或許過幾日我有時間，會完整的針對其中的觀念、奧妙，作一個簡單但完整的闡述。

今天先以最近剛寫的簡單作品 opmr6，作一個簡短的範例。

也許有人會質疑開發這個網站速度之快，是不是因為是我去「<b>拷貝誰的產品</b>」塗塗改改所做出來的？非也，筆者其實有時候不喜歡太簡單的產品還去找 opensource 修改，更改別人的程式架構和 CSS 布景一輪下來，可能還遠比我實際動手作還慢。而各位也可以從開放出來的原始碼，看到這的確是我本人手工刻出來的（那麼陽春沒經過優化的原始碼看也知道吧 XD）。

那麼，為什麼可以這麼快呢？簡單自我分析兩個原因：

<blockquote>1. ROR 的框架與套件（我不用重新發明輪子）省了很多開發時間。
2. 我還蠻常練習寫 ROR 的。</blockquote>

這個網站我使用的技術有

1. mongrel 與 reverse proxy

<blockquote>這個網站實際上是跑在 veryxd.net 的 6666 port，不過基於大家不會用這麼奇怪網址的緣故。我設定了一個簡單的 reverse proxy 搭配 virtual host，綁定在 http://opmr6.veryxd.net。相關技術可以參考 theggive 的 <a href="http://lightyror.thegiive.net/2006/12/apache-22-mongrel.html">這篇文章 Apache2.2 +Mongrel 設定方式</a>。</blockquote>
&nbsp;
2. hlb 開發的 <a href="http://happydesigner.org/blog/2006/12/26/30">yullio plugin</a>。

<blockquote>mollio 是網際網路上 opensource 的一套 template，看起來非常高雅。基於在下對 CSS design 不是很厲害的關係，於是版面上就使用 hlb 的 yullio 取巧，這樣 opmr6 就可以瞬間從醜到爆的鴨子，搖身一變就成了一隻高雅的天鵝。那 yullio 跟 mollio 有什麼不同呢？大致上就是 yullio 是把 mollio 的一些配置重新抽掉重作，除了開發上更有彈性之外，在各瀏覽器上看到的效果也較一致。匆促上線的當然還有一點陽春，所以隔天我也花了一點時間換了幾個欄位的 div 之 class，讓 mollio 的設計不被浪費到。</blockquote>

3. ROR 內建的 scaffold。

<blockquote>剛開始學習 ROR 的人，莫不會被這神妙的工具嚇到。scaffold 解決一般開發網站常會重複碰到的施工狀況：CRUD ( Create / Read / Update / Delete）資料的設計與呈現，這個內建的指令真的省了很多程式設計師許多時間。當然我在寫這支程式時也取巧的先用 scaffold 創了一隻 controller 和 view（每次都重寫 controller 也是很煩人的事，不如直接使用內建機制。當然 opmr6 的 controller 被我改了一部份，view 當然是抽掉重寫）。</blockquote>

那麼模型架構呢？

<blockquote>我用了兩個 model （兩張 table）作這件事情。

一言以蔽之就是 "comment" has_many&nbsp; "addcomments"。

comment 記錄了主旨，內容，發表人暱稱、多少人閱讀以及建立時間。addcomments 記錄了 內容，針對哪個主旨回應，發表人暱稱，以及建立時間。</blockquote>

一個留言版所需要的大概就只有這麼多。從原始資料庫設計，本來還可以看的出來有投票推文的設計。但是最後考慮到，這個系統是我沒有調校過的 beta 版，禁不起大家灌票攻擊，最後還是打消念頭改成閱讀數。

而 facebook 版本，在<a href="http://blog.xdite.net/?p=510">這篇文章</a>已經說過，我就不在此重複贅述。


筆者也不單會只會這一種語言，在寫 ROR 前，我是寫 PHP 的，但使用 PHP 達到這種開發速度其實有困難（當然也有可能是因為我不是很厲害的高手的原因）。而 ROR 提供了許多很方便的零件和輪子，如果很常在裝卸零件的話，用這門框架在短時間是很容易搭建出一輛勉強上路的拼裝車的。（這個系統的開發速度其實短可以到30分鐘，長可以到4,5個小時…）

但，之所以會舉修車的這個例子，主要還是要說明幾件事。太多人看了 ROR 快速開發的威力，第一次寫程式就決定學習它，但筆者卻這並不覺得是一件很健康的事。正常學習網頁開發用的程式語言還是需要從 PHP 或者是 JSP 甚至是 .NET 開始。為什麼，開發一個「動態網站」其實所需要的知識比「靜態網站」多太多了。但是不一定是每個人都意識到只會 HTML / CGI ，在當今的世界裡並不能讓你做出一個可以 work 的網站，在 1.0 時代或許還吃得開，在 2.0 時代只會 HTML 這樣的技能卻讓你只作一位前端設計師也不一定夠格。動態網站 不只指的是 使用程式語言動態產生 HTML 碼，更需要跟資料庫打交道，你更必須瞭解 Session、Cookie 是怎麼運作的，如何使用多台機器分散流量或者是程式計算的負擔等等，這些都是開發中要學的幾樣 知識之一。在 Ajax 誕生以後，需要打交道的對象更多了 javascript , xml。網站建構的技術細膩到了有前端和後端之分，前端需要懂得的知識也並不僅止於 HTML，需要學會的還有 javascript / css 或者是 RIA 技術等等...。ROR 雖然開放了很多零件和輪子，卻會讓新手跳過這些基本的修練，並不是很好的開始，同時在學習 ROR 的過程中，因為缺乏這些基本訓練，會處處遇到學習的障礙。

當然，大家不免俗的可能還是對 ROR 感到好奇，筆者還是提供以前一篇以前寫過的新手入門：「<a href="http://blog.xdite.net/?p=433">ROR 的建議書單</a>」參考。 但我還是要建議一句，如果你想要自己學習寫網站或者是 hire 工程師，還是建議從頭學習基本知識和測驗這些基本知識。畢竟，技術不熟練或者是選錯工程師，都會<a href="http://www.wretch.cc/blog/phopicking&amp;article_id=12955261">讓你的網站晚一點開門燒掉更多的錢</a>，這就不是多加幾個工程師或採用更方便的開發框架可以挽救的事了。



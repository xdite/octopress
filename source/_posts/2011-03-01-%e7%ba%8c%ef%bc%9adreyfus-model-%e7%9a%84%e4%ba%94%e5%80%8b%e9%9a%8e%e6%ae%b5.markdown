--- 
wordpress_id: 2087
layout: post
title: !binary |
  57qM77yaRHJleWZ1cyBNb2RlbCDnmoTkupTlgIvpmo7mrrU=

date: 2011-03-01 01:07:28 +08:00
wordpress_url: http://blog.xdite.net/?p=2087
---
續<a href="http://blog.xdite.net/?p=2077">上篇</a>。

這篇是摘一些 Dreyfus Model 中有趣的敘述

<blockquote>
高級新手和勝任者經常會把指令清單和軟件設計模式混淆，有時這會導致災難性的後果。就我知道曾經有一位開發人員剛看了 GoF 的書，並熱情地想開始使用設計模式。所有模式，一次用盡。在一小段平凡的代碼裡。他設法將 23 個設計模式中的 17 個用在他那段不幸的代碼片段中，終於被人發現。
</blockquote>

<blockquote>直覺是專家的工具，但公司往往輕視它，因為他們錯誤地認位，直覺「不科學」或者「不可重製」。因此，我們往往本末倒置，不清聽薪酬高昂的專家們的意見。

相反，我們也往往喜歡使用新手，把他們扔在發展水平等級的最底層，讓他們覺得未來不可及。在這種情況下你可能會說，我們正在試圖賽羊。同樣，這不是一個使用新手的有效方法。他們需要「被駕馭」，也就是說，明確方向，快速成功，等等。敏捷開發是非常有效的工具，但他不適用於一個完全由新手和高級新手組成的團隊。
</blockquote>

<blockquote>你可能認為絕大多數人都處於中等位置 -- Dreyfus Model 模型符合標準分布，典型的鐘型曲線。

其實不是。

可悲的是，<strong>研究似乎表明，大多數的人的大多數技能，在他們生命的大多數時間裡，從來沒有高於第二階段：高級新手</strong>，「執行他們需要做的任務並根據需求學習新任務，但是從來沒有對任務環境獲得更廣泛的，概念上的理解。」</blockquote>

<blockquote>

專家 != 老師

專家並不總是最好的老師。教學是一門技能，你在某個領域是專家，這並不能保證你可以把它教給別人。另外。前面提到專家經常無法清楚表達自己是如何做出具體決策的，因此，你可能發現處在勝任水平的人可能更合適教一名新手。當團隊需要 pair 或者尋找指導老師時，你可以嘗試選用和受訓者技能水平相近的老師。

</blockquote>

<blockquote>二階不勝任 ( second-order incompetence ）：不知道自己不知道多少。新手儘管能力差但是信心十足，而專家在情況異常時會變得異發謹慎。專家會更多地自我懷疑。</blockquote>


--- 
wordpress_id: 2700
layout: post
title: !binary |
  6Kqk5omT6Kqk5pKe5Lit5pG45Ye657K+5a+m5Ye654mI

date: 2011-07-18 00:26:27 +08:00
wordpress_url: http://blog.xdite.net/?p=2700
---
<blockquote> 這是我下一本書「<a href="http://blog.xdite.net/?p=2639">精實出版</a>」的其中一章內容 ，歡迎各位先進不吝指教。</blockquote>

<p>2009年7月1日。城邦的大家長何飛鵬先生曾做了一個預言：「紙本書五年內將死」，這個預言在業界造成了一場震撼。</p>

<p>當然，這句話不僅是個噱頭而已，這也是個似乎可預見的未來，何先生不過是大膽的講了出來而已。</p>

<p>「紙書將死」，接下來該怎麼做？沒人知道。</p>

<p>大家只好悶著頭各自回家想。</p>

<p>於是乎，市面上開始生出了著這樣一堆畸形的實驗產品：</p>

<ul>
<li>有著重重 DRM 保護，只能使用特別的載具閱讀的電子書</li>
<li>只是照樣把紙本排版搬上電子平台的雜誌。</li>
<li>過度注重特效，而忽略閱讀本質的數位互動雜誌</li>
</ul>

<p>任何明眼人也能看出，這些產品沒有一個能夠能改變出版業界的未來。</p>

<p>但是，為什麼大家會朝這些方向去做？</p>

<h2>科技殺死的不是「紙本書」，而是「製造紙本書的流程」</h2>

<p>我個人覺得，大家誤解了「紙書將死」的這句話。</p>

<p>如果你是一個讀者的話，靜觀現在的資訊取得趨勢，你會發現到造成紙本書凋零的原因是：多樣傳播的媒介，降低了取得資訊所需的時間與代價。</p>

<p>從來就不是現在的「讀者」轉性愛用「紙」以外的媒介，印刷以外的排版方式吸收資訊。</p>

<p>讀者其實願意付出代價，買任何「不是過期」的有價資訊。任何形式都可以。</p>

<h3>Case Study : Ruby on Rails 系列教學書籍</h3>

<p>出版社對這件事的感覺可能沒有那麼強烈。所以產生一系列美麗的誤判。</p>

<p>但是我對這件事的感覺卻非常強烈。</p>

<p>先來談談我的背景好了。我是一個業餘作者，正職是 Web Developer，專長是 "Ruby on Rails"。</p>

<p>Ruby on Rails 是世界上頂尖的 web 開發框架，它的特點有很多，當然外界宣傳的噱頭多半著重在於 Rails 的「速度」，Rails 可以讓你很快的搭建出你想要的網站，快速實現你的 idea，配合營運的腳步快速修正網站的方向。</p>

<p>因此吸引不少人投入這個框架的學習之中。</p>

<p>但 Rails 的「速度」也是它的另外一個致命傷。Rails 框架本身的進化速度快的令人難以想像（雖然進化的方向是好的）。到後期，幾乎是一年之後，原先的 API 與文件就幾乎作廢。原先在 Google 上搜尋到可用的結果，一年之後反而變成迷惑大家的障礙。</p>

<p>書市的銷售數字更有趣，在 2006 - 2007 年，世界上的電腦書銷售排行榜第一名是 Ruby / Rails 相關書籍。一年、兩年後，這個排名被 Python 取代。</p>

<p>很多人以為是 Python 取代了 Ruby 的地位。事實上完全不是，而是傳統出版商「拒絕」再出「Ruby on Rails」的書籍。為什麼呢？你可能絕對想像不到，前一年在書市上大熱賣的主題書，後一年完全變成「廢紙」。而且，「每一年」都是這種情形。</p>

<p>這下糟糕了。其實很多人是願意付錢買這些資訊的，作者也很願意寫。但問題是傳統書籍的出版流程造成寫 Rails 書無利可圖。（ 寫一本大部頭的 Rails 紙本書，依循傳統的出版流程，往往需要 6 - 12 個月的時間，書出完剛好資訊過期 XD）</p>

<p>辦法是人想出來的，所有的 Rails 書籍作者開始朝往另外一個方向發展：Early Access Edition。</p>

<p>Pragmatic BookShelf Beta, Manning 的 MEAP, O'Reilly 的 Rough Cut，Rails 的書籍通通改以這種方式發行。只要完成一章或數章，讀者馬上可以收到更新內容，進行反饋。</p>

<p>或不透過出版社，自行發行 PDF，或者是發行 Video。如 Peepcode 的系列影片或者是 Learn Rails by Example 這樣的電子書...</p>

<p>這樣的好處是在 Rails 這個框架的演化過程中，就能同步販賣有價的知識。Rails 一但定版也能馬上發行紙本，而不是坐著讓下一年的利潤直接蒸發。</p>

<p>它們採取這樣發行的方式，初衷絕不是因為「出版社賺走太多錢」，或者是讀者偏好以這樣的格式吸收知識，而是若不採用這種出版方式，<strong>「知識的販售價值會被時間蒸發乾淨」</strong>。</p>

<h2>誤打誤撞摸出「精實出版」</h2>

<p>「精實出版」（ Lean Publishing )這個詞很新穎，相信你一定是第一次聽到。</p>

<p>不瞞你說，我也是第一次聽到。</p>

<p>這個詞是我在寫完第一本書之後，為了打造更快更方便的個人出版工具，而在網路上不經意瞥到的。我才知道我正在做的事情正踏在「精實出版」的範疇之中。</p>

<p>那麼什麼又是「精實出版」呢？</p>

<p>根據 Lean Publishing 該詞創造者 Peter Armstrong 在「Lean Publishing : The future of publishing」一書中的定義：</p>

<p><strong>Lean Publishing is the act of self-publishing a book while you are writing it, evolving the book with feedback from your readers and finishing a first draft before optionally using the traditional publishing workflow.</strong></p>

<p>從上述的 Case Study 中，你也可以知道，幾乎所有 Ruby on Rails 書籍的作者都走向了這條路。他們不只是因為「預謀」省下投入的「時間成本」而已，而是時勢就逼得他們這樣做。</p>

<p>為什麼我的上一本書「第一次學 Rails 就上手」採取類似「精實出版」這樣的發行模式。因為寫一本書賺多少錢都在其次，這樣的主題，若走傳統模式，利潤會被傳統出版流程搾乾，販售價值也會被流逝的時間蒸乾。成為一本不折不扣的沒有任何價值的書。</p>

<p>有趣的是：Peter Armstrong 這個人，除了本身是個人出版平台「Lean Pub」的站長外。他同時自己也出版過幾本書，通通是採類似的形式。出到後來，乾脆就蓋了自己的出版工具。</p>

<p>而更有趣的是，原來 Peter Armstrong 不是生面孔。原來早在 2008 年，我就買過他的其中一本書「Flex on Rails」。</p>

<p>沒錯，又是 "Rails"。</p>

<h2>出版跟創業相當類似</h2>

<p>Peter Armstrong 在這本書中又談到了這個詞的命名由來。他坦承是從 Eric Ries 的 Lean Startup 一詞借來的概念。</p>

<p>Peter 認為，出版跟創業其實是很類似的。它們主要有四點相似之處：</p>

<ol>
<li>都存在著很多市場風險、技術風險以及很小的成功機率。</li>
<li>寫一本書和開創一個 Startup 都是一種由一個人或一小群人主導的創意過程。</li>
<li>以過去的歷史經驗，它們多半都要花上一年的時間。在開發釋出第一個版本之前，通常都處於「隱身模式」。</li>
<li>以過去的歷史經驗，Startup 多半背後有 VC （風險投資）贊助資金，而書的背後是 Publisher 的資金。而 Startup 和書的形態都是 hit-driven business（ 熱賣商品驅動導向，也就是無論你想銷售什麼，VC 或 Publisher 都會強迫你遵循某種熱門 pattern，傾向能夠吸引更多用戶，也許是拉低讀者閱讀門檻，也許是偏往讀者「可能」有興趣的方向）</li>
</ol>

<p>但「後果」也非常的相似：「很容易閉門造出沒有想要的東西」。慘賠收場。</p>

<p>原因是你收了錢，聽了建議，<strong>以 VC 或 Publisher 利益為主的意見為導向</strong>，反而把自己關在一個相當小的方向，花了一年悶著頭造出一個可能跟本不適合該產品調性的東西，慘賠收場。</p>

<h2>如何成功，即使是小成功</h2>

<p>很多人在寫書或創業前，都做了很多不必要的妄想。結果綁手綁腳反而把自己全部限制住了。</p>

<p>其實要成功的方式很簡單，道理也跟開發 Open Source 軟體的原則差不多。</p>

<p>"Release early. Release often. And listen to your customers."</p>

<p>把握這個原則，你將不會再花了大把時間，寫出「沒人要看的」東西。寫完就直接釋出，讀者會直接跟你說，你寫的好不好，他們願不願意付錢。他們直接告訴你，你現在的缺點是什麼，他想繼續看的是什麼？</p>

<p>如果遵循傳統的出版模式，我可能會從出版社收到這樣的建議：</p>

<p>(1) 你的書觀眾太少，要不要多加一些 Web Development 的知識給讀者 => 多花了很多時間寫無關 Rails 的內容</p>

<p>(2) 你的書頁數太少，要不要多加一點比較進階的 Ruby on Rails 知識 => 多花了很多時間去鑽研原本與本書宗旨無關的進階內容</p>

<p>(3) 因為你的書太薄，要不要調降你的售價。=> 原本微薄的利潤又更少了</p>

<p>當然，最令人晴天霹靂的是，等我按照他們的方式都改完了。書過期了，賣不出去...</p>

<p>而不是現在這樣的情形：我發行了這一本書，實實在在的幫忙解決了 Rails 新手入門的問題，更從當中賺到了一筆錢。</p>

====
<blockquote>

廣告：
<a href="http://rails-101.logdown.com/">書：第一次學 Rails 就上手</a> - 7 天之內學會 Rails（USD $9.99）
<a href="http://registrano.com/group/rubytaiwan">聚會：Rails Tuesday</a> Rails 社群聚會 （免費）2011/07/19
</blockquote>
